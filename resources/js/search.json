[[{"l":"Barrow Robotics FTC","p":["This site holds coding docsumentation and resources for Barrow Robotics FTC teams"]}],[{"l":"Getting Started","p":["This folder includes pages which will guide you through the set up of your coding enviroment, libraries, and robot."]}],[{"l":"Android Studio + Pedro Pathing","p":["This page will guide you through the set up of Android Studio and Pedro Pathing for a robot with a Pinpoint Odometry Computer.","Use the navigation buttons below to move between steps of this guide."]}],[{"l":"Download Android Studio","p":["Before starting to code, we need to setup the development enviroment. Some teams use OnBotJava to code, but it is very limiting and doesn't allow external packages like Pedro Pathing. To get around this, we need to use Android Studio. It can be a little more challenging to learn and set up, but it is worth the effort.","Before we start, you should know that the FTC docs for installing Android Studio are outdated. This guide is up to date as of the 2025-2026 DECODE season.","Download Android Studio from here","At this time of this guide, the latest version is Narwhal 3 Feature Drop","Use the downloaded installer to install Android Studio","Do not check the \"Run Android Studio\" option or manually run it after installation, we have more work to do.","Now that Android Studio is isntalled, let's move to the next step."]}],[{"l":"Download JDK","p":["The FTC SDK does not use the latest version of Gradle, so we need to install a JDK (Java Development Kit) to use it. The SDK uses Gradle 8.7.0, which requires JDK 17.","Download the appropriate JDK 17.0.12 installer from here","Use the downloaded installer to install the JDK","We are now ready to open Android Studio!"]}],[{"l":"Android Studio Settings","p":["Now we can open up Android Studio and do some configuration!","Open Android Studio","In the bottom left, press the settings icon and select \"Settings\"","Go to Build, Execution, Deployment > Build Tools > Gradle","Under \"Gradle Projects\", change the \"Default Gradle JDK\" to C:/Program Files/Java/jdk-17(on Windows)","Press \"Apply\" at the bottom of the settings window","Before we close the Settings window, we need to install 2 additional plugins, go to the Plugins tab","Search for \"Rainbow Brackets\" and install the plguin by \"Zhihao Zhang\", this will make development easier by highlighting brackets in code","Search for \"ADB Wi-FI\" and install the plugin by \"Yury Polek\", this will allow you to wirelessly send code to your control hub without a USB cable","Press \"Apply\", and then \"OK\"","Now we'll create a GitHub account and fork the quickstart repo."]}],[{"l":"Forking Quickstart","p":["In order to use version control for your FTC code, we need to fork the quickstart repo.","If you already havea GitHub account, you can skip the first step","Go to Github amd create an account","Go to Pedro-Pathing/Quickstart","Click the \"Fork\" button at the top right of the page","Use the dropdown below accordingly","It should now bring you to your fork of the quickstart repo, copy the link","Now we'll clone this repo locally so you can access it in Android Studio."]},{"l":"Non-Barrow Robotics Teams","p":["Name your fork whatever you would like, then click \"Create fork\""]},{"l":"Barrow Robotics Teams","p":["If you are on a Barrow Robotics team, make sure you have access to the Barrow Robotics FTC organization, when forking, switch the \"Owner\" dropdown to \"Barrow-Robotics-FTC\". The \"Repository name\" should be \"TeamNumber-Season\", ex. \"18597-DECODE\". Then click \"Create fork\""]}],[{"l":"Cloning Locally","p":["To edit your fork of the quickstart repo, we need to clone it locally so it can be accessed in Android Studio.","Move back to tehe Android Studio window","Click the \"Clone Repository\" button","In the window that pops up, set the \"URL\" to the link you copied earlier","Click \"Clone\"","Once the repo is cloned, you will get a dialog which asks \"Trust and Open Project?\", check the \"Trust all projects in folder\" and \"Add to Microsoft Defender exclusion list\" boxes, then click \"Trust Project\"","Accept any prompts for administrator permissions and wait for the blue loading bar in the bottom right to go away","You will get this popup during the process. DO NOT CLICK UPGRADE. Click \"More\", and \"Don't show again\"","Android Gradle Plugin Notification","Everything we need to code is now installed! Now we are going to connect the REV Control Hub to Android Studio for wireless coding."]}],[{"l":"Wireless Coding","p":["You would think something like this is straightofrward, exactly like it would be on OnBotJava. Just connect to the Control Hub Wi-Fi, abd upload the code. However, it isn't this simple.","In order to build a program in Android Studio, you need internet access to fetch libraries. So you can't just connect to the Control Hub Wi-Fi.","So, in order to code wirelessly, you will need 2 available connections to your computer (atleast one of which being Wi-Fi). This can be done by","Ethernet: This is the best solution for PCs as it provides a fast connection to the internet, and it quite common already. By using Ethernet for your main internet connection, you free up your Wi-Fi connection to connect to the Control Hub.","Secondary Wi-Fi Card: This is a good solution for PCs, but it is not recommended for mobile devices as it can be challenging to set up.","USB Wi-FI Adapter: This is the simplest solution, and is recomended for mobile devices. It is extremely simple to set up, just plug it into your device, and it will provide you with a second Wi-Fi connection.","For the purposes of this guide, we will be using a USB Wi-Fi Adapter, specifically the TP-Link N150. We will connect to the internet with our main Wi-Fi card to prioritize speed, and then use the USB Wi-Fi Adapter to connect to the Control Hub.","Once you are connected to both networks, follow these steps:","Open the ADB Wi-Fi tab on the right side of Android Studio","Connect to the Control Hub with a USB-C cable","Click \"Connect\" on the REV Robotics Control Hub","Unplug the USB cable, you should stay connected to the Control Hub wirelessly now","To verify that you are connected correctly, restart the Control Hub and make sure it can reconnect without the USB cable","Thats it for setup! Now it's time for Pedro Pathing."]}],[{"l":"Pedro Pathing","p":["Don't plug your i2C into port 0 of the control hub, this is used for the IMU and can cause problems","For this tutorial, we will use a mecanum chasis with a GoBilda Pinpoint Odometry Computer for feeding position to Pedro Pathing. The process is very similar with other localization systems.","Make sure you don't remove the package line","Notes (these will be useful to know for the following steps):","Open the Constants file located at TeamCode/src/main/java/org/firstinspires/ftc/teamcode/pedroPathing/Constants.java in Android Studio","Pedro Pathing is a library for FTC which allows you to follow paths on the field with your robot.","Read this page, it will explain what the Constants file entails","Replace the current imports of the Constants file with the following (Pedro Pathing is not very clear about imports in their documentation):","Run the localization test if you haven't already at the bottom of the localizers page","Set up some of your robot's characteristics using this","Thats it for tuning, try all of these test programs to make sure you did the tuning correctly, after this, we're ready to code!","The Automatic Tuners are extremely simple tuners that perform a test and output a value which you can put in your Constants file","This page explains how PIDs work in Pedro Pathing, you should read this page to guide your setup. Using the Dual PID system is recomended for accuracy.","Unlike conventional pathing systems such as RoadRunner, Pedro Pathing leverages BÃ©zier curve generation to produce smoother, faster, and more efficient trajectories. Its primary focus is on enhancing the adaptability of robots during autonomous operation by reacting dynamically to environmental changes, reducing error margins, and ensuring optimal path execution. You can learn more about Pedro Pathing here.","Use this guide to tune the Drive PIDF and braking constants. Braking strength and braking start are the last 2 values of PathConstraints in the Constants file. Don't worry about filter tuning, just use defaults.","Use this page to set up Pinpoint localization, if you aren't using a Pinpoint, select your localizer here and set it up accorrdingly, make sure you change the import statement","Watch this video to tune the centripetal factor, once you complete the tuning, save the values as shown here","Watch this video to tune the Heading PIDF controller, once you complete the tuning, save the values as shown here","Watch this video to tune the Translational PIDF controller, once you complete the tuning, save the values as shown here","You may have to replace the PinpointConstants import with the localization method of your choice"]}],[{"l":"Add Examples","p":["Before you start coding, we recomend that you create a new folder in your teamcode folder called examples, here you can store any examples/tempaltes you want to use. We have modified versions of the official Pedro Pathing Autonomous and TeleOp sample codes shown below which are great starting points for your own projects. We converted the samples to Linear OpModes and improved code/comment quality.","To use these samples, you must remove the @Disabled annotation to display them on the Driver Hub. They are also marked with // REMOVE THI LINE TO SEE ON DRIVER HUB","Autonomous","TeleOp"]}]]